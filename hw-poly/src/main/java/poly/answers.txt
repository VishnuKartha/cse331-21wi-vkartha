## CSE 331 hw-poly Questions
## Part 0
###########################################################################

1. Multiplication Pseudocode

    r = p * q:
    set r = 0 by creating a new polynomial with value 0
    {inv1 r = (p_0 * q) + (p_1 * q) ...(p_i-1 * q) where p_i is the ith term in p}
    for each term t_p in p{
        set polyToAdd = 0 by creating a new polynomial with value 0
        {inv2 polyToAdd = (t_p * q_0) + (t_p* q_1) ...(t_p * q_k-1) where p_j is the lth term in p}
        for each term t_q in q{
            set mul = t_q * t_p multiplication of terms
             //termToPoly converts a given term to a single term polynomial
             polyToAdd = polyToAdd + termToPoly(mul) // uses polynomial addition(defined in assignment)
        }
        use polynomial addition(defined in assignment) to add polyToAdd and r
     }

2. Division Pseudocode
    q = n / d: // q is quotient, n is numerator, d is denominator
    rem = n // by copying n to rem
    q = 0 // by creating a new polynomial with value 0.
    dHighestDegTerm = the highest degree term in d;
    {inv: n = dq + rem}
    while((rem != 0) and (degree of d <= degree of rem)) {
        // assumes that the polynomial rem has its terms ordered by power from highest to lowest
        remHighestDegTerm = the highest degree term in rem
        set multiplier = (remHighestDegTerm/dHighestDegTerm) // returns a term.
        //termToPoly converts a given term to a single term polynomial
        q = q + termToPoly(multiplier) // uses polynomial addition previously defined
        set toSubtract = termToPoly(-multiplier) * d // uses the multiplication function previously made
                                                     //  with the negated multiplier and the divisor d
        rem = rem + toSubtract // uses polynomial addition
    }
    return q

    }

3. Division Example: (x3+x-1) / (x+1) = x2-x+2
    q = 0
    n = (x^3+x-1)
    d = x+1
    rem = (x^3+x-1) //copy of n
    dHighestDegTerm = x
    while ((rem != 0) and (degree of d <= degree of rem)){
    Iteration 1: rem: x^3 + x - 1, degree of rem = 3, degree of d = 1, q = 0
        is degree of d <= degree of rem? yes
        remHighestDegTerm = x^3
        multiplier = x^3/x = x^2
        q= 0 + x^2 = x^2
        toSubtract = -x^2 * x + 1 = -x^3 - x^2
        rem = x^3 + x -1 +(-x^3 -x^2) = -x^2  + x - 1
    Iteration 2: rem: -x^2  + x - 1, degree of rem = 2, degree of d = 1, q = x^2
        is degree of d <= degree of rem? yes
        remHighestDegTerm = -x^2
        multiplier = -x^2/x = -x
        q= x^2 + -x = x^2 -x
        toSubtract = -(-x) * x+1 = x(x+1) = x^2 + x
        rem = (-x^2  + x - 1) + (x^2 + x) = 2x - 1
    Iteration 3: rem: 2x - 1, degree of rem = 1, degree of d = 1, q = x^2 -x
        is degree of d <= degree of rem? yes
        remHighestDegTerm = 2x
        multiplier = 2x/x = 2
        q=  (x^2 -x) + 2 = x^2 -x + 2
        toSubtract = -2(x+1) = -2x -2
        rem =  (2x - 1)+(-2x-2) = -3
    Iteration 3: rem: -3, degree of rem = 0, degree of d = 1, q = x^2 -x + 2
        is degree of d <= degree of rem? no

    }




## Part 1
###########################################################################

1. Weakened Rep Invariant

   Method: public RatNum(int n, int d):
   Changes:
   a) The constructor would not reduce ratio to lowest terms
   b) The constructor would thus also not calculate the gcd(n,d)
   Advantages:
      faster to execute, less lines of code
   Disadvantages:
      none

   Method: private  void checkRep()
   Changes:
   a) No need to check that the numer and demo are in
      reduced form.
   Advantages:
        faster to execute, less lines of code
   Disadvantages:
        none

   Method: public boolean equals(Object obj)
   Changes:
   a) instead of just comparing the numerators and denominators of the
      two objects you must find the form of the RatNum
   Advantages:
        none
   Disadvantages:
        slower to execute.

   Method: public String toString()
   Changes:
   a) has to first change the numerators and denominators of
      RatNum to its reduced form
   Advantages:none
   Disadvantages: slower to execute

2. Alternate add, sub, mul, div.
    These above changes would fail to meet the specifications because
    the spec of RatNum declared it to be immutable. Which means that
    the fields numer and denom would not change throghout a
    RatNum's object's existstance(after being constructed).Thus,
    by adding those two lines, we would be breaking the contract
    of the spec by mutating RatNum's field.



3. Constructor checkReps
    In RatNum it is sufficient to call checkRep only at the end of
    constructors because the representation invariant is affected
    only by numer and denom. However, as numer and denom are immutable,
    once they are created in the constructor, it cannot be changed,
    and thus, if the checkRep() in the constructor passes, then the
    representation invariant cannot be broken throughout the existance
    of that RatNum.




## Part 2
###########################################################################

1. Calls to checkRep in RatTerm
      In RatTerm, I only call checkRep  at the end of
        constructors because the representation invariant is affected
        only by expt and coeff. However, as expt and coeff are immutable,
        once they are created in the constructor, it cannot be changed,
        and thus, if the checkRep() in the constructor passes, then the
        representation invariant cannot be broken throughout the existance
        of that RatTerm.


2. Weakened Rep Invariant

   Method: public RatTerm(RatNum c, int e):
   Changes:
   a) No extra check in the if condition for a special case if the coefficient is 0.
   Advantages:
      faster to execute, less lines of code
   Disadvantages:
      none
   Method: public ratTerm add(RatTerm arg){
   Changes:
   a) the add method must now explicitly check to see if either this or arg is zero as if only one of them is zero, then
      the method should return a new RatTerm with same coefficients and exponents as the nonzero RatTerm
   Advantages:
        none
   Disadvantages:
        slower to execute. More lines of code and more logic needed.

   Method: public String toString()
   Changes:
   a) There has to be an additional if statement for zero RatTerms. As in that case the toString should return "0"/
   Advantages:
        None
   Disadvantages:
        slower and more complicated logic.

   Method: public boolean equals(Object obj)
   Changes:
   a) there must be a separate check for zero terms. If the coefficients of both terms are zero then the method should
      return true regardless of the exponents.
   Advantages:
        none
   Disadvantages:
        more complicated logic.

   Method: private  void checkRep()
   Changes:
   a) delete the second assert statement which requires the exponent to be zero if coeff is zero
   Advantages:
        faster to execute, less lines of code
   Disadvantages:
        none

   Method: public String toString()
   Changes:
   a) has to first change the numerators and denominators of
      RatNum to its reduced form
   Advantages:none
   Disadvantages: slower to execute

3. Alternate Rep Invariant

   Method: public RatTerm(RatNum c, int e):
   Changes:
   a) Add an extra if statement to check if c is a RatNum NAN and if so set this.expt to 0.
   Advantages:
        none
   Disadvantages:
       Slower, more complicated logic
   Method: public String toString()
   Changes:
   a) There has to be an additional if statement for zero RatTerms. As in that case the toString should return "0"/
   Advantages:
        None
   Disadvantages:
        slower and more complicated logic.
   Method: private void checkRep()
   Changes:
   a) add an additional assert statement which fails if the coefficient  is a NAN and the exponent is not 0
   Advantages:
        none
   Disadvantages:
        slower to execute, more lines of code

4. Preferred Invariants
    I  do not prefer the additional RatTerm invariant coeff.isNaN() ⇒ expt = 0 because it added
    more logic into the code than before,without much benefit to performance.
    I do prefer the additional RatTerm invariant coeff.equals(RatNum.ZERO) ⇒ expt = 0 because without it,
    the logic for toString(), add(), and equals() became more complicated,while the only drawback was
    that the constructor and checkRep() had an additional if statement.


## Part 3
###########################################################################

1. Calls to checkRep in RatPoly



2. Alternate Representation



