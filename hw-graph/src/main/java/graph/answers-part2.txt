## CSE 331 hw-graph Part 2 Questions

NOTE: This file is used as part of hw-graph-part2, and is not due as part of the hw-graph-part1
submission. You may leave it blank for hw-graph-part1.

## Section 1
###########################################################################

A few examples of possible Graph representations:

    A: A collection of edges.
    B: An adjacency list, in which each node is associated with a list of its outgoing edges.
    C: An adjacency matrix, which explicitly represents, for every pair ⟨A,B⟩ of edges, whether there is a link from A to B, and how many.

1. In two or three sentences, explain an advantage and a disadvantage of each of the
representations listed above (for example, in terms of runtime complexity, space
complexity, or ease of implementation).

One advantage of option A is that it requires less space
as it does not require storing nodes in the overall graph class.
One disadvantage of option A is that  listing all of the nodes in the graph is slow and
complicated because we are not explicitly storing the nodes.Thus, we would have to iterate through the
list of edges in order to find all of the nodes in the graph.

One advantage of option B is that you can easily list all of the nodes in the graph as each node appears in
the adjacency list. One disadvantage is that returning all the edges in the graph is more complicated and not
as efficient as it requires iterating through the adjacency list and getting
all of the outgoing edges of each node.

One advantage of option C is that checking if there is an edge between two nodes is extremely fast O(1) because
 the adjacency matrix holds that data. One disadvantage is that it requires an entry for every possible edge between
nodes, which will take up more space especially for sparse graphs with many nodes and few edges.



2. In two to three sentences, describe the representation you chose and explain why you
chose it. If you chose to use a different representation than one of the three we described
above, be sure to list its advantages and disadvantages, too.

I chose to choose option B for my representation because it allows for fast and easy implementations of
getting outgoing edges of a node in the graph and getting all of the nodes in the graph, which are
two important methods required by the homework spec. I chose it over option C because it does not require
as much space.



## Section 4
###########################################################################

    (Please keep your answers brief and to-the-point.)

1. Describe any new tests you added and why you added them, or why you feel that your original
tests alone are sufficient.

I added tests of the toString methods of the Graph, Node, and Edge classes. I could not test
these methods previously as I did not know the implementation.
I also added tests of the hashCode and equals methods for Node and Edge because those
are public methods accessible by the client.

Other than these additions, I felt my original tests were sufficient, because I had extensive tests
for the other public methods.



2. Did you make any changes to your specifications as you were implementing your Graph? (yes/no)
If yes, describe your changes and why you made them.

Yes I made some slight changes.
Following the feedback of homework part1, I added comments describing each method.
I also added checkRep functions to my Node and Edge classes to make sure the representation
invariant does not get broken.



